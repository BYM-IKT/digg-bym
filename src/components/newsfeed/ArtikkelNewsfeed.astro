---
import "./newsfeed.css";
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";
import type { NewsfeedProps } from "@interfaces/newsfeed";
import type { ArtikkelFrontmatter } from "@interfaces/frontmatter";

interface Props extends NewsfeedProps, ArtikkelFrontmatter {}

const {
  draft,
  title,
  url,
  image,
  elementsPerRow = 1,
  severity = "low",
} = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/*.{jpeg,jpg,png,gif}"
);
const getColors = (severity: "low" | "medium" | "high") => {
  switch (severity) {
    case "low":
      return { backgroundColor: "inherit", color: "inherit" };
    case "medium":
      return { backgroundColor: "red", color: "white" };
    case "high":
      return { backgroundColor: "black", color: "white" };
    default:
      return { backgroundColor: "inherit", color: "inherit" };
  }
};
const { backgroundColor, color } = getColors(severity);
---

<a class="newsfeed-post-link newsfeed-post-link-artikkel" href={url}>
  <div class="newsfeed-post-draft-image-wrapper">
    <Picture
      class="newsfeed-post-image"
      style={image.height ? { height: image.height } : null}
      src={images[image.url]()}
      alt={image.alt}
    />
    {draft === true && <span>Draft</span>}
  </div>
  <div class="newsfeed-post-heading-wrapper">
    {
      severity === "high" && (
        <span class="newsfeed-post-severity">Akkurat n√•:</span>
      )
    }
    <h2 class="newsfeed-post-heading">{title}</h2>
  </div>
</a>
<style define:vars={{ elementsPerRow, backgroundColor, color }}>
  .newsfeed-post-link-artikkel {
    background-color: var(--backgroundColor);
    color: var(--color);
  }
  .newsfeed-post-severity {
    font-size: 1.5rem;
  }
</style>
